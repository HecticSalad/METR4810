
MEGA_UART_INTERRUPT_EXAMPLE2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000466  000004fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000466  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d2  00800112  00800112  0000050c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000053c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ead  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000766  00000000  00000000  00001455  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000817  00000000  00000000  00001bbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  000023d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000ef83  00000000  00000000  000024ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004e4  00000000  00000000  0001142f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00011913  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000425  00000000  00000000  00011a53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	73 c0       	rjmp	.+230    	; 0x130 <__vector_18>
  4a:	00 00       	nop
  4c:	29 c0       	rjmp	.+82     	; 0xa0 <__vector_19>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 3e       	cpi	r26, 0xE4	; 228
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	98 d0       	rcall	.+304    	; 0x1cc <main>
  9c:	e2 c1       	rjmp	.+964    	; 0x462 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <__vector_19>:
 *
 * This handler is called each time the UART data register is available for
 * sending data.
 */
ISR(UART0_DATA_EMPTY_IRQ)
{
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	2f 93       	push	r18
  ac:	3f 93       	push	r19
  ae:	4f 93       	push	r20
  b0:	5f 93       	push	r21
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
  b6:	af 93       	push	r26
  b8:	bf 93       	push	r27
  ba:	ef 93       	push	r30
  bc:	ff 93       	push	r31
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
  be:	ef ed       	ldi	r30, 0xDF	; 223
  c0:	f1 e0       	ldi	r31, 0x01	; 1
  c2:	91 81       	ldd	r25, Z+1	; 0x01
  c4:	80 81       	ld	r24, Z
	// if there is data in the ring buffer, fetch it and send it
	if (!ring_buffer_is_empty(&ring_buffer_out)) {
  c6:	98 17       	cp	r25, r24
  c8:	f9 f0       	breq	.+62     	; 0x108 <__vector_19+0x68>
  ca:	91 81       	ldd	r25, Z+1	; 0x01
  cc:	80 81       	ld	r24, Z
 *
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
  ce:	98 13       	cpse	r25, r24
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <__vector_19+0x34>
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__vector_19+0x32>
	uint8_t data = ring->buffer[ring->read_offset];
  d4:	ef ed       	ldi	r30, 0xDF	; 223
  d6:	f1 e0       	ldi	r31, 0x01	; 1
  d8:	81 81       	ldd	r24, Z+1	; 0x01
  da:	a3 81       	ldd	r26, Z+3	; 0x03
  dc:	b4 81       	ldd	r27, Z+4	; 0x04
  de:	a8 0f       	add	r26, r24
  e0:	b1 1d       	adc	r27, r1
  e2:	9c 91       	ld	r25, X
 *
 * \returns the next read offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_read(const struct ring_buffer *ring)
{
	return get_next(ring->read_offset, ring->size);
  e4:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
  e6:	48 2f       	mov	r20, r24
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	22 81       	ldd	r18, Z+2	; 0x02
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	31 09       	sbc	r19, r1
  f2:	42 17       	cp	r20, r18
  f4:	53 07       	cpc	r21, r19
  f6:	11 f0       	breq	.+4      	; 0xfc <__vector_19+0x5c>
  f8:	8f 5f       	subi	r24, 0xFF	; 255
  fa:	01 c0       	rjmp	.+2      	; 0xfe <__vector_19+0x5e>
  fc:	80 e0       	ldi	r24, 0x00	; 0
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
	ring->read_offset = ring_buffer_get_next_read(ring);
  fe:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <ring_buffer_out+0x1>
		UDR0 = ring_buffer_get(&ring_buffer_out);
 102:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 106:	05 c0       	rjmp	.+10     	; 0x112 <__vector_19+0x72>
	}
	else {
		// no more data to send, turn off data ready interrupt
		UCSR0B &= ~(1 << UDRIE0);
 108:	e1 ec       	ldi	r30, 0xC1	; 193
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	8f 7d       	andi	r24, 0xDF	; 223
 110:	80 83       	st	Z, r24
	}
}
 112:	ff 91       	pop	r31
 114:	ef 91       	pop	r30
 116:	bf 91       	pop	r27
 118:	af 91       	pop	r26
 11a:	9f 91       	pop	r25
 11c:	8f 91       	pop	r24
 11e:	5f 91       	pop	r21
 120:	4f 91       	pop	r20
 122:	3f 91       	pop	r19
 124:	2f 91       	pop	r18
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <__vector_18>:
 * \brief Data RX interrupt handler
 *
 * This is the handler for UART receive data
 */
ISR(UART0_RX_IRQ)
{
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	2f 93       	push	r18
 13c:	3f 93       	push	r19
 13e:	4f 93       	push	r20
 140:	5f 93       	push	r21
 142:	6f 93       	push	r22
 144:	7f 93       	push	r23
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
 14a:	af 93       	push	r26
 14c:	bf 93       	push	r27
 14e:	ef 93       	push	r30
 150:	ff 93       	push	r31
	ring_buffer_put(&ring_buffer_in, UDR0);
 152:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 * \retval true  if the buffer is full
 * \retval false if there is space available in the ring buffer
 */
static inline bool ring_buffer_is_full(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring_buffer_get_next_write(ring));
 156:	ea ed       	ldi	r30, 0xDA	; 218
 158:	f1 e0       	ldi	r31, 0x01	; 1
 15a:	41 81       	ldd	r20, Z+1	; 0x01
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
 15c:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
 15e:	68 2f       	mov	r22, r24
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	22 81       	ldd	r18, Z+2	; 0x02
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	21 50       	subi	r18, 0x01	; 1
 168:	31 09       	sbc	r19, r1
 16a:	62 17       	cp	r22, r18
 16c:	73 07       	cpc	r23, r19
 16e:	11 f0       	breq	.+4      	; 0x174 <__vector_18+0x44>
 170:	8f 5f       	subi	r24, 0xFF	; 255
 172:	01 c0       	rjmp	.+2      	; 0x176 <__vector_18+0x46>
 174:	80 e0       	ldi	r24, 0x00	; 0
 * \param data the byte to put to the buffer
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
 176:	48 13       	cpse	r20, r24
 178:	01 c0       	rjmp	.+2      	; 0x17c <__vector_18+0x4c>
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__vector_18+0x4a>
	ring->buffer[ring->write_offset] = data;
 17c:	ea ed       	ldi	r30, 0xDA	; 218
 17e:	f1 e0       	ldi	r31, 0x01	; 1
 180:	80 81       	ld	r24, Z
 182:	a3 81       	ldd	r26, Z+3	; 0x03
 184:	b4 81       	ldd	r27, Z+4	; 0x04
 186:	a8 0f       	add	r26, r24
 188:	b1 1d       	adc	r27, r1
 18a:	9c 93       	st	X, r25
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
 18c:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
 18e:	48 2f       	mov	r20, r24
 190:	50 e0       	ldi	r21, 0x00	; 0
 192:	22 81       	ldd	r18, Z+2	; 0x02
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	21 50       	subi	r18, 0x01	; 1
 198:	31 09       	sbc	r19, r1
 19a:	42 17       	cp	r20, r18
 19c:	53 07       	cpc	r21, r19
 19e:	11 f0       	breq	.+4      	; 0x1a4 <__vector_18+0x74>
 1a0:	8f 5f       	subi	r24, 0xFF	; 255
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <__vector_18+0x76>
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
 1a6:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <ring_buffer_in>
}
 1aa:	ff 91       	pop	r31
 1ac:	ef 91       	pop	r30
 1ae:	bf 91       	pop	r27
 1b0:	af 91       	pop	r26
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	7f 91       	pop	r23
 1b8:	6f 91       	pop	r22
 1ba:	5f 91       	pop	r21
 1bc:	4f 91       	pop	r20
 1be:	3f 91       	pop	r19
 1c0:	2f 91       	pop	r18
 1c2:	0f 90       	pop	r0
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	0f 90       	pop	r0
 1c8:	1f 90       	pop	r1
 1ca:	18 95       	reti

000001cc <main>:
 *
 * \note The RX and TX pins should be externally connected in order to pass the
 * test.
 */
int main(void)
{
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	cd b7       	in	r28, 0x3d	; 61
 1d2:	de b7       	in	r29, 0x3e	; 62
 1d4:	69 97       	sbiw	r28, 0x19	; 25
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	f8 94       	cli
 1da:	de bf       	out	0x3e, r29	; 62
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	cd bf       	out	0x3d, r28	; 61

	uint8_t data = 0;
	uint8_t cnt = 0;
	cli();
 1e0:	f8 94       	cli
 */
static void uart_init(void)
{
#if defined UBRR0H
	// get the values from the setbaud tool
	UBRR0H = UBRRH_VALUE;
 1e2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
 1e6:	8c e0       	ldi	r24, 0x0C	; 12
 1e8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
#else
#error "Device is not supported by the driver"
#endif

#if USE_2X
	UCSR0A |= (1 << U2X0);
 1ec:	e0 ec       	ldi	r30, 0xC0	; 192
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	82 60       	ori	r24, 0x02	; 2
 1f4:	80 83       	st	Z, r24
#endif

	// enable RX and TX and set interrupts on rx complete
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
 1f6:	88 e9       	ldi	r24, 0x98	; 152
 1f8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

	// 8-bit, 1 stop bit, no parity, asynchronous UART
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00) | (0 << USBS0) |
 1fc:	86 e0       	ldi	r24, 0x06	; 6
 1fe:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 * \retval struct ring_buffer a struct containing the ring buffer
 */
static inline struct ring_buffer ring_buffer_init(uint8_t *buffer, uint8_t size)
{
	struct ring_buffer ring;
	ring.write_offset = 0;
 202:	1d 8a       	std	Y+21, r1	; 0x15
	ring.read_offset = 0;
 204:	1e 8a       	std	Y+22, r1	; 0x16
	ring.size = size;
 206:	84 e6       	ldi	r24, 0x64	; 100
 208:	8f 8b       	std	Y+23, r24	; 0x17
	ring.buffer = buffer;
 20a:	22 e1       	ldi	r18, 0x12	; 18
 20c:	31 e0       	ldi	r19, 0x01	; 1
 20e:	39 8f       	std	Y+25, r19	; 0x19
 210:	28 8f       	std	Y+24, r18	; 0x18
	return ring;
 212:	95 e0       	ldi	r25, 0x05	; 5
 214:	fe 01       	movw	r30, r28
 216:	75 96       	adiw	r30, 0x15	; 21
 218:	de 01       	movw	r26, r28
 21a:	50 96       	adiw	r26, 0x10	; 16
 21c:	01 90       	ld	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	9a 95       	dec	r25
 222:	e1 f7       	brne	.-8      	; 0x21c <main+0x50>
 224:	95 e0       	ldi	r25, 0x05	; 5
 226:	fe 01       	movw	r30, r28
 228:	70 96       	adiw	r30, 0x10	; 16
 22a:	de 01       	movw	r26, r28
 22c:	1b 96       	adiw	r26, 0x0b	; 11
 22e:	01 90       	ld	r0, Z+
 230:	0d 92       	st	X+, r0
 232:	9a 95       	dec	r25
 234:	e1 f7       	brne	.-8      	; 0x22e <main+0x62>
			(0 << UPM01) | (0 << UPM00) | (0 << UMSEL01) |
			(0 << UMSEL00);

	// initialize the in and out buffer for the UART
	ring_buffer_out = ring_buffer_init(out_buffer, BUFFER_SIZE);
 236:	95 e0       	ldi	r25, 0x05	; 5
 238:	fe 01       	movw	r30, r28
 23a:	3b 96       	adiw	r30, 0x0b	; 11
 23c:	af ed       	ldi	r26, 0xDF	; 223
 23e:	b1 e0       	ldi	r27, 0x01	; 1
 240:	01 90       	ld	r0, Z+
 242:	0d 92       	st	X+, r0
 244:	9a 95       	dec	r25
 246:	e1 f7       	brne	.-8      	; 0x240 <main+0x74>
 * \retval struct ring_buffer a struct containing the ring buffer
 */
static inline struct ring_buffer ring_buffer_init(uint8_t *buffer, uint8_t size)
{
	struct ring_buffer ring;
	ring.write_offset = 0;
 248:	1d 8a       	std	Y+21, r1	; 0x15
	ring.read_offset = 0;
 24a:	1e 8a       	std	Y+22, r1	; 0x16
	ring.size = size;
 24c:	8f 8b       	std	Y+23, r24	; 0x17
	ring.buffer = buffer;
 24e:	86 e7       	ldi	r24, 0x76	; 118
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	99 8f       	std	Y+25, r25	; 0x19
 254:	88 8f       	std	Y+24, r24	; 0x18
	return ring;
 256:	85 e0       	ldi	r24, 0x05	; 5
 258:	fe 01       	movw	r30, r28
 25a:	75 96       	adiw	r30, 0x15	; 21
 25c:	de 01       	movw	r26, r28
 25e:	16 96       	adiw	r26, 0x06	; 6
 260:	01 90       	ld	r0, Z+
 262:	0d 92       	st	X+, r0
 264:	8a 95       	dec	r24
 266:	e1 f7       	brne	.-8      	; 0x260 <main+0x94>
 268:	85 e0       	ldi	r24, 0x05	; 5
 26a:	fe 01       	movw	r30, r28
 26c:	36 96       	adiw	r30, 0x06	; 6
 26e:	de 01       	movw	r26, r28
 270:	11 96       	adiw	r26, 0x01	; 1
 272:	01 90       	ld	r0, Z+
 274:	0d 92       	st	X+, r0
 276:	8a 95       	dec	r24
 278:	e1 f7       	brne	.-8      	; 0x272 <main+0xa6>
	ring_buffer_in = ring_buffer_init(in_buffer, BUFFER_SIZE);
 27a:	85 e0       	ldi	r24, 0x05	; 5
 27c:	fe 01       	movw	r30, r28
 27e:	31 96       	adiw	r30, 0x01	; 1
 280:	aa ed       	ldi	r26, 0xDA	; 218
 282:	b1 e0       	ldi	r27, 0x01	; 1
 284:	01 90       	ld	r0, Z+
 286:	0d 92       	st	X+, r0
 288:	8a 95       	dec	r24
 28a:	e1 f7       	brne	.-8      	; 0x284 <main+0xb8>

	uint8_t data = 0;
	uint8_t cnt = 0;
	cli();
	uart_init();
	sei();
 28c:	78 94       	sei
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
 28e:	0f 2e       	mov	r0, r31
 290:	fa ed       	ldi	r31, 0xDA	; 218
 292:	6f 2e       	mov	r6, r31
 294:	f1 e0       	ldi	r31, 0x01	; 1
 296:	7f 2e       	mov	r7, r31
 298:	f0 2d       	mov	r31, r0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
 29a:	20 e0       	ldi	r18, 0x00	; 0
 29c:	01 e1       	ldi	r16, 0x11	; 17
 29e:	11 e0       	ldi	r17, 0x01	; 1
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
 2a0:	ef ed       	ldi	r30, 0xDF	; 223
 2a2:	f1 e0       	ldi	r31, 0x01	; 1
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) {
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
 2a4:	41 ec       	ldi	r20, 0xC1	; 193
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
 2a8:	32 2f       	mov	r19, r18
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
 2aa:	0f 2e       	mov	r0, r31
 2ac:	fd e5       	ldi	r31, 0x5D	; 93
 2ae:	9f 2e       	mov	r9, r31
 2b0:	f0 2d       	mov	r31, r0
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
 2b2:	d3 01       	movw	r26, r6
 2b4:	11 96       	adiw	r26, 0x01	; 1
 2b6:	9c 91       	ld	r25, X
 2b8:	11 97       	sbiw	r26, 0x01	; 1
 2ba:	8c 91       	ld	r24, X
	cli();
	uart_init();
	sei();

	while(1) {
		if (uart_char_waiting()) {
 2bc:	98 17       	cp	r25, r24
 2be:	c9 f3       	breq	.-14     	; 0x2b2 <main+0xe6>
 2c0:	11 96       	adiw	r26, 0x01	; 1
 2c2:	9c 91       	ld	r25, X
 2c4:	11 97       	sbiw	r26, 0x01	; 1
 2c6:	8c 91       	ld	r24, X
 *
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
 2c8:	98 13       	cpse	r25, r24
 2ca:	01 c0       	rjmp	.+2      	; 0x2ce <main+0x102>
 2cc:	ff cf       	rjmp	.-2      	; 0x2cc <main+0x100>
	uint8_t data = ring->buffer[ring->read_offset];
 2ce:	d3 01       	movw	r26, r6
 2d0:	11 96       	adiw	r26, 0x01	; 1
 2d2:	6c 91       	ld	r22, X
 2d4:	11 97       	sbiw	r26, 0x01	; 1
 2d6:	13 96       	adiw	r26, 0x03	; 3
 2d8:	8d 91       	ld	r24, X+
 2da:	9c 91       	ld	r25, X
 2dc:	14 97       	sbiw	r26, 0x04	; 4
 2de:	86 0f       	add	r24, r22
 2e0:	91 1d       	adc	r25, r1
 2e2:	dc 01       	movw	r26, r24
 2e4:	dc 90       	ld	r13, X
 *
 * \returns the next read offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_read(const struct ring_buffer *ring)
{
	return get_next(ring->read_offset, ring->size);
 2e6:	d3 01       	movw	r26, r6
 2e8:	11 96       	adiw	r26, 0x01	; 1
 2ea:	8c 91       	ld	r24, X
 2ec:	11 97       	sbiw	r26, 0x01	; 1
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
 2ee:	e8 2e       	mov	r14, r24
 2f0:	f1 2c       	mov	r15, r1
 2f2:	12 96       	adiw	r26, 0x02	; 2
 2f4:	6c 91       	ld	r22, X
 2f6:	70 e0       	ldi	r23, 0x00	; 0
 2f8:	61 50       	subi	r22, 0x01	; 1
 2fa:	71 09       	sbc	r23, r1
 2fc:	e6 16       	cp	r14, r22
 2fe:	f7 06       	cpc	r15, r23
 300:	11 f0       	breq	.+4      	; 0x306 <main+0x13a>
 302:	8f 5f       	subi	r24, 0xFF	; 255
 304:	01 c0       	rjmp	.+2      	; 0x308 <main+0x13c>
 306:	82 2f       	mov	r24, r18
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
	ring->read_offset = ring_buffer_get_next_read(ring);
 308:	d3 01       	movw	r26, r6
 30a:	11 96       	adiw	r26, 0x01	; 1
 30c:	8c 93       	st	X, r24
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	71 e0       	ldi	r23, 0x01	; 1
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
 312:	91 81       	ldd	r25, Z+1	; 0x01
 314:	80 81       	ld	r24, Z
			data = uart_getchar();

				for (cnt = 0; cnt < strlen(test_string); cnt++) {
					while(!ring_buffer_is_empty(&ring_buffer_out)) {
 316:	98 13       	cpse	r25, r24
 318:	fc cf       	rjmp	.-8      	; 0x312 <main+0x146>
						;
					}
					uart_putchar(test_string[cnt]);
 31a:	db 01       	movw	r26, r22
 31c:	bd 90       	ld	r11, X+
 31e:	bd 01       	movw	r22, r26
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
 320:	f8 94       	cli
 322:	91 81       	ldd	r25, Z+1	; 0x01
 324:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) {
 326:	98 13       	cpse	r25, r24
 328:	04 c0       	rjmp	.+8      	; 0x332 <main+0x166>
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
 32a:	da 01       	movw	r26, r20
 32c:	8c 91       	ld	r24, X
 32e:	80 62       	ori	r24, 0x20	; 32
 330:	8c 93       	st	X, r24
 * \retval true  if the buffer is full
 * \retval false if there is space available in the ring buffer
 */
static inline bool ring_buffer_is_full(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring_buffer_get_next_write(ring));
 332:	a1 80       	ldd	r10, Z+1	; 0x01
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
 334:	c0 80       	ld	r12, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
 336:	8c 2d       	mov	r24, r12
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	e2 80       	ldd	r14, Z+2	; 0x02
 33c:	f1 2c       	mov	r15, r1
 33e:	b1 e0       	ldi	r27, 0x01	; 1
 340:	eb 1a       	sub	r14, r27
 342:	f1 08       	sbc	r15, r1
 344:	8e 15       	cp	r24, r14
 346:	9f 05       	cpc	r25, r15
 348:	19 f0       	breq	.+6      	; 0x350 <main+0x184>
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	8c 0d       	add	r24, r12
 34e:	01 c0       	rjmp	.+2      	; 0x352 <main+0x186>
 350:	83 2f       	mov	r24, r19
 * \param data the byte to put to the buffer
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
 352:	a8 12       	cpse	r10, r24
 354:	01 c0       	rjmp	.+2      	; 0x358 <main+0x18c>
 356:	ff cf       	rjmp	.-2      	; 0x356 <main+0x18a>
	ring->buffer[ring->write_offset] = data;
 358:	f0 80       	ld	r15, Z
 35a:	83 81       	ldd	r24, Z+3	; 0x03
 35c:	94 81       	ldd	r25, Z+4	; 0x04
 35e:	8f 0d       	add	r24, r15
 360:	91 1d       	adc	r25, r1
 362:	dc 01       	movw	r26, r24
 364:	bc 92       	st	X, r11
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
 366:	c0 80       	ld	r12, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
 368:	8c 2d       	mov	r24, r12
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	e2 80       	ldd	r14, Z+2	; 0x02
 36e:	f1 2c       	mov	r15, r1
 370:	b1 e0       	ldi	r27, 0x01	; 1
 372:	eb 1a       	sub	r14, r27
 374:	f1 08       	sbc	r15, r1
 376:	8e 15       	cp	r24, r14
 378:	9f 05       	cpc	r25, r15
 37a:	19 f0       	breq	.+6      	; 0x382 <main+0x1b6>
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	8c 0d       	add	r24, r12
 380:	01 c0       	rjmp	.+2      	; 0x384 <main+0x1b8>
 382:	83 2f       	mov	r24, r19
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
 384:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
 386:	78 94       	sei

	while(1) {
		if (uart_char_waiting()) {
			data = uart_getchar();

				for (cnt = 0; cnt < strlen(test_string); cnt++) {
 388:	06 17       	cp	r16, r22
 38a:	17 07       	cpc	r17, r23
 38c:	09 f0       	breq	.+2      	; 0x390 <main+0x1c4>
 38e:	c1 cf       	rjmp	.-126    	; 0x312 <main+0x146>
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
 390:	91 81       	ldd	r25, Z+1	; 0x01
 392:	80 81       	ld	r24, Z
					while(!ring_buffer_is_empty(&ring_buffer_out)) {
						;
					}
					uart_putchar(test_string[cnt]);
				}
				while(!ring_buffer_is_empty(&ring_buffer_out)) {
 394:	98 13       	cpse	r25, r24
 396:	fc cf       	rjmp	.-8      	; 0x390 <main+0x1c4>
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
 398:	f8 94       	cli
 39a:	91 81       	ldd	r25, Z+1	; 0x01
 39c:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) {
 39e:	98 13       	cpse	r25, r24
 3a0:	04 c0       	rjmp	.+8      	; 0x3aa <main+0x1de>
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
 3a2:	da 01       	movw	r26, r20
 3a4:	8c 91       	ld	r24, X
 3a6:	80 62       	ori	r24, 0x20	; 32
 3a8:	8c 93       	st	X, r24
 * \retval true  if the buffer is full
 * \retval false if there is space available in the ring buffer
 */
static inline bool ring_buffer_is_full(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring_buffer_get_next_write(ring));
 3aa:	91 81       	ldd	r25, Z+1	; 0x01
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
 3ac:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
 3ae:	e8 2e       	mov	r14, r24
 3b0:	f1 2c       	mov	r15, r1
 3b2:	62 81       	ldd	r22, Z+2	; 0x02
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	61 50       	subi	r22, 0x01	; 1
 3b8:	71 09       	sbc	r23, r1
 3ba:	e6 16       	cp	r14, r22
 3bc:	f7 06       	cpc	r15, r23
 3be:	11 f0       	breq	.+4      	; 0x3c4 <main+0x1f8>
 3c0:	8f 5f       	subi	r24, 0xFF	; 255
 3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <main+0x1fa>
 3c4:	82 2f       	mov	r24, r18
 * \param data the byte to put to the buffer
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
 3c6:	98 13       	cpse	r25, r24
 3c8:	01 c0       	rjmp	.+2      	; 0x3cc <main+0x200>
 3ca:	ff cf       	rjmp	.-2      	; 0x3ca <main+0x1fe>
	ring->buffer[ring->write_offset] = data;
 3cc:	60 81       	ld	r22, Z
 3ce:	83 81       	ldd	r24, Z+3	; 0x03
 3d0:	94 81       	ldd	r25, Z+4	; 0x04
 3d2:	86 0f       	add	r24, r22
 3d4:	91 1d       	adc	r25, r1
 3d6:	dc 01       	movw	r26, r24
 3d8:	dc 92       	st	X, r13
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
 3da:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
 3dc:	e8 2e       	mov	r14, r24
 3de:	f1 2c       	mov	r15, r1
 3e0:	62 81       	ldd	r22, Z+2	; 0x02
 3e2:	70 e0       	ldi	r23, 0x00	; 0
 3e4:	61 50       	subi	r22, 0x01	; 1
 3e6:	71 09       	sbc	r23, r1
 3e8:	e6 16       	cp	r14, r22
 3ea:	f7 06       	cpc	r15, r23
 3ec:	11 f0       	breq	.+4      	; 0x3f2 <main+0x226>
 3ee:	8f 5f       	subi	r24, 0xFF	; 255
 3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <main+0x228>
 3f2:	82 2f       	mov	r24, r18
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
 3f4:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
 3f6:	78 94       	sei
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
 3f8:	91 81       	ldd	r25, Z+1	; 0x01
 3fa:	80 81       	ld	r24, Z
				while(!ring_buffer_is_empty(&ring_buffer_out)) {
					;
				}
				uart_putchar(data);
				for (cnt = 0; cnt < strlen(test_string2); cnt++) {
					while(!ring_buffer_is_empty(&ring_buffer_out)) {
 3fc:	98 13       	cpse	r25, r24
 3fe:	fc cf       	rjmp	.-8      	; 0x3f8 <main+0x22c>
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
 400:	f8 94       	cli
 402:	91 81       	ldd	r25, Z+1	; 0x01
 404:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) {
 406:	98 13       	cpse	r25, r24
 408:	04 c0       	rjmp	.+8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
 40a:	da 01       	movw	r26, r20
 40c:	8c 91       	ld	r24, X
 40e:	80 62       	ori	r24, 0x20	; 32
 410:	8c 93       	st	X, r24
 * \retval true  if the buffer is full
 * \retval false if there is space available in the ring buffer
 */
static inline bool ring_buffer_is_full(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring_buffer_get_next_write(ring));
 412:	91 81       	ldd	r25, Z+1	; 0x01
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
 414:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
 416:	e8 2e       	mov	r14, r24
 418:	f1 2c       	mov	r15, r1
 41a:	62 81       	ldd	r22, Z+2	; 0x02
 41c:	70 e0       	ldi	r23, 0x00	; 0
 41e:	61 50       	subi	r22, 0x01	; 1
 420:	71 09       	sbc	r23, r1
 422:	e6 16       	cp	r14, r22
 424:	f7 06       	cpc	r15, r23
 426:	11 f0       	breq	.+4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 428:	8f 5f       	subi	r24, 0xFF	; 255
 42a:	01 c0       	rjmp	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42c:	82 2f       	mov	r24, r18
 * \param data the byte to put to the buffer
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
 42e:	98 13       	cpse	r25, r24
 430:	01 c0       	rjmp	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 432:	ff cf       	rjmp	.-2      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
	ring->buffer[ring->write_offset] = data;
 434:	60 81       	ld	r22, Z
 436:	83 81       	ldd	r24, Z+3	; 0x03
 438:	94 81       	ldd	r25, Z+4	; 0x04
 43a:	86 0f       	add	r24, r22
 43c:	91 1d       	adc	r25, r1
 43e:	dc 01       	movw	r26, r24
 440:	9c 92       	st	X, r9
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
 442:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
 444:	e8 2e       	mov	r14, r24
 446:	f1 2c       	mov	r15, r1
 448:	62 81       	ldd	r22, Z+2	; 0x02
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	61 50       	subi	r22, 0x01	; 1
 44e:	71 09       	sbc	r23, r1
 450:	e6 16       	cp	r14, r22
 452:	f7 06       	cpc	r15, r23
 454:	11 f0       	breq	.+4      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 456:	8f 5f       	subi	r24, 0xFF	; 255
 458:	01 c0       	rjmp	.+2      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 45a:	82 2f       	mov	r24, r18
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
 45c:	80 83       	st	Z, r24
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
 45e:	78 94       	sei
 460:	28 cf       	rjmp	.-432    	; 0x2b2 <main+0xe6>

00000462 <_exit>:
 462:	f8 94       	cli

00000464 <__stop_program>:
 464:	ff cf       	rjmp	.-2      	; 0x464 <__stop_program>
